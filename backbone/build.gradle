apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'

android {

    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    afterEvaluate {
        def originalFilePath = "$buildDir/outputs/aar/backbone-release.aar"
        def newFilePath = originalFilePath.replace(".aar", "_v${defaultConfig.versionName}.aar")
        def debugFile = file(originalFilePath)

        tasks.named("assembleRelease").configure {
            doLast {
                debugFile.renameTo(newFilePath)
            }
        }
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.8.0"
        dimension "default"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        def useSecureFlagProd = rootProject.hasProperty("useSecureFlagProd") ? rootProject.useSecureFlagProd : true
        def useSecureFlagDev = rootProject.hasProperty("useSecureFlagDev") ? rootProject.useSecureFlagDev : false

        prod {
            buildConfigField 'boolean', 'USE_SECURE_FLAG', "$useSecureFlagProd"
        }

        dev {
            buildConfigField 'boolean', 'USE_SECURE_FLAG', "$useSecureFlagDev"
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

}

dependencies {
    def kotlinVersion = '1.3.70'
    def koinVersion = '2.1.5'
    def navVersion = '2.2.2'
    def coreTestingVersion = '2.1.0'
    def mockitoKotlinVersion = "2.2.0"
    def mockitoVersion = '3.2.4'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Material components
    implementation "com.google.android.material:material:1.1.0"

    // Koin for Android
    implementation "org.koin:koin-android:$koinVersion"

    // Koin Android ViewModel feature
    implementation "org.koin:koin-android-viewmodel:$koinVersion"

    // Koin Android X ViewModel feature
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

    // Android x
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'

    // Android Lifecycle Extensions
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Misc libs
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.afollestad.material-dialogs:core:0.9.0.2"

    // JUnit 4 framework
    testImplementation 'junit:junit:4.13'

    // Mockito framework
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"

    // Android core testing
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
    }

    afterEvaluate {
        javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.getJavaCompileProvider().configure {
                it.classpath.files
            }
        })
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

def RS_POM_GROUP = "com.medable.researchstack"
def RS_POM_DESCRIPTION = "Medable's ResearchStack fork"
def RS_POM_LICENCE_NAME = "The Apache Software License, Version 2.0"
def RS_POM_LICENCE_URL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
def RS_POM_LICENCE_DIST = "repo"

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {

                pom.groupId = RS_POM_GROUP
                pom.artifactId = project.getProperties().BB_POM_ARTIFACT_ID
                pom.version = android.defaultConfig.versionName

                def deployPath = file('./')
                repository(url: "file://${deployPath.absolutePath}/../../Android-SDK/")

                pom.project {
                    name project.getProperties().BB_POM_NAME
                    packaging project.getProperties().BB_POM_PACKAGING
                    description RS_POM_DESCRIPTION

                    licenses {
                        license {
                            name RS_POM_LICENCE_NAME
                            url RS_POM_LICENCE_URL
                            distribution RS_POM_LICENCE_DIST
                        }
                    }
                }

                pom.whenConfigured { pom ->
                    pom.dependencies.forEach { dep ->
                        if (dep.getVersion() == "unspecified") {
                            dep.setGroupId(RS_POM_GROUP)
                            dep.setVersion(android.defaultConfig.versionName)
                        }
                    }
                }
            }
        }
    }
}

buildscript {

    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
    }
}
