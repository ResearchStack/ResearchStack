package org.researchstack.foundation.core.models.result

import org.researchstack.foundation.core.interfaces.IResult
import org.threeten.bp.Instant
import java.util.*

/**
 * The StepResult class represents a result produced by a [org.researchstack.foundation.ui.step.layout.StepLayout]
 * to hold all child results of type `T` produced by the step.
 *
 *
 * A step result is typically generated by the framework as the task proceeds. When the task
 * completes, it may be appropriate to serialize it for transmission to a server, or to immediately
 * perform analysis on it.
 *
 *
 * For example, an [QuestionStep] object produces a result of type `T` that becomes
 * a child of the [StepResult] object.
 */
class StepResult<ResultType> @JvmOverloads constructor(override val identifier: String, override val type: String = DEFAULT_TYPE_KEY,
                                                       override var startTimestamp: Instant = Instant.now(),
                                                       override var endTimestamp: Instant = Instant.now(),
                                                       var results: MutableMap<String, ResultType> = HashMap()) : IResult {

    companion object {
        /**
         * When StepResult only has a single value, pair that value with the following key
         */
        @JvmField
        val DEFAULT_KEY = "answer"

        @JvmField
        val DEFAULT_TYPE_KEY = "step"
    }

    /**
     * Returns the result stored using {@link #setResult}.
     *
     * @return the result with the default identifier
     */
    fun getResult(): ResultType? {
        return results[DEFAULT_KEY]
    }

    /**
     * Sets the result using the default key, useful when there is only a single result.
     *
     * @param result the result to save with the default key
     */
    fun setResult(result: ResultType?) {
        setResultForIdentifier(DEFAULT_KEY, result)
    }

    /**
     * Returns the result for the given identifier, use this when there are multiple results for the
     * step.
     *
     * @param identifier the identifier used as the key for storing this result
     * @return the result for the given identifier
     */
    fun getResultForIdentifier(identifier: String): ResultType? {
        return results[identifier]
    }

    /**
     * Sets the result for the given identifier, use when there are multiple results for the step.
     * <p>
     * If there is only one result, use the {@link #setResult} convenience method instead.
     *
     * @param identifier the identifier for the result
     * @param result     the result to save
     */
    fun setResultForIdentifier(identifier: String, result: ResultType?) {
        result?.let { results.put(identifier, it) } ?: results.remove(identifier)
    }
}